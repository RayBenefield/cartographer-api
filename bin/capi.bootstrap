#!/usr/local/bin/bash

# This gets the path of the executing script.
SELF_PATH=$(cd -P -- "$(dirname -- "${0}")" && pwd -P) && SELF_PATH=${SELF_PATH}/$(basename -- "${0}")
# If the path is a symlink (which is likely if it is in /usr/local/bin) this will get the actual filepath.
REAL_FILE=$(readlink ${SELF_PATH})
# If it isn't a symlink then let's stick with SELF_PATH
if [[ -z $REAL_FILE ]]; then
    REAL_FILE=${SELF_PATH}
fi
REAL_DIR=$(dirname ${REAL_FILE})

source $REAL_DIR/colors.sh
source $REAL_DIR/functions.sh

# Start with a blank line
echo

##################################################
# Provide help documentation
##################################################

# Provide help.
getopts h help
if [[ "${help}" = "h" ]]; then
    PrintInfo "Description"
    echo
    PrintDescription "Enter the script's ${BIBlue}description${No_Color} here."
    echo
    PrintInfo "Usage"
    echo
    PrintCodeLine "script.template [-h]"
    echo
    PrintInfo "Examples"
    echo
    PrintCodeLine "script.template"
    echo
    PrintBoldInfo "Required Environment Variables"
    echo
    PrintCodeLine "${BICyan}EXAMPLE_ENV_VARIABLE${Cyan}=<some-description-of-variable>"
    echo

    exit
fi

##################################################
# Generate a hashmap of the Output Values
##################################################

DomainStacks=( "Games" "MapGames" "PlayerGames" "PlayerGameCounts" )
declare -A OutputMap
for Stack in "${DomainStacks[@]}"
do
	Outputs=$(aws cloudformation describe-stacks --stack-name Capi-${Stack} --query 'Stacks[0].Outputs[*].[OutputKey,OutputValue]' --output text)
	while IFS=$'\t' read -r -a Output
	do
		OutputMap[${Output[0]}]=${Output[1]}
	done <<< "${Outputs[@]}"
done


##################################################
# Generate a hashmap of the Output Values
##################################################

# GamesForMapGames Queue -sub-> to Games-New Topic
# QueueGames:TopicNewMapGames
# GamesForGameEvents Queue -sub-> to Games-New Topic
# QueueGames:TopicNewGameEvents
# GamesForPlayers Queue -sub-> to Games-New Topic
# Games:New-Players
# PlayersForPlayerGameCounts Queue -sub-> to Players-New Topic
# Players:New-PlayerGameCounts
# PlayerGamesForGames Queue -sub-> to PlayerGames-New Topic
# PlayerGames-New-Games
# PlayerGameCountsForPlayerGames Queue -sub-> to PlayerGameCounts-New/Updated/Continue Topics
# PlayerGames:New-PlayerGameCounts
# PlayerGames:Updated-PlayerGameCounts
# PlayerGames:Continue-PlayerGameCounts

PrintInfo "Mapping Queues to Topics..."
echo
Indent

##### TODO: Move Mappings to JSON file and use JQ for parsing
Mappings=( "TopicNewGames:QueueGamesForMapGames" "TopicNewPlayerGames:QueuePlayerGamesForGames" "TopicNewPlayerGameCounts:QueuePlayerGameCountsForPlayerGames" "TopicUpdatedPlayerGameCounts:QueuePlayerGameCountsForPlayerGames" "TopicPlayersTotalGamesUpdated:QueuePlayersForPlayerGameCounts" )
for Mapping in "${Mappings[@]}"
do
	# Split mapping into ${SourceTopic} `:` ${TargetQueue}
	IFS=':' read -ra Map <<< "$Mapping"
	TopicKey=${Map[0]}
	QueueKey=${Map[1]}

	# Get Queue/Topic ARN from Outputs with "Queue${TargetDomain}" key
	QueueArn=${OutputMap[${QueueKey}]}
	TopicArn=${OutputMap[${TopicKey}]}

	PrintInfo "${BIBlue}${TopicKey}${Green} ----> ${BIBlue}${QueueKey}${No_Color}"

	# Subscribe SQS Queue to SNS Topic with the AWS CLI
	Subscription=$(aws sns subscribe --topic-arn ${TopicArn} --protocol sqs --notification-endpoint ${QueueArn})
done

Unindent
echo
PrintSeparator
echo


##################################################
# Tie Cloudwatch Scheduled Events to Lambdas
##################################################

PrintInfo "Setting Cloudwatch Scheduled Events..."
echo
Indent

##### TODO: Move Mappings to JSON file and use JQ for parsing
Mappings=( "PlayerGamesAdderArn:1 minute" "GamesAdderArn:1 minute" "MapGamesAdderArn:1 minute" "PlayerGameCountsUpdaterArn:1 minute" "PlayerGameCountsRefresherArn:1 hour" )
Iterator=0
for Mapping in "${Mappings[@]}"
do
	# Split mapping into ${SourceTopic} `:` ${TargetQueue}
	IFS=':' read -ra Map <<< "$Mapping"
	FunctionKey=${Map[0]}
	Rate=${Map[1]}

	# Get Queue/Topic ARN from Outputs with "Queue${TargetDomain}" key
	FunctionArn=${OutputMap[${FunctionKey}]}

	PrintInfo "${BIBlue}${FunctionKey}${No_Color} (${Rate})"

	# Create the rule (ScheduledEvent)
	RuleArn=$( { aws events put-rule --schedule-expression "rate(${Rate})" --name ${FunctionKey} --output text; } 2>&1 ) || PrintException "${RuleArn}"
	# Add permission for event to exceute the function
	Permission=$( { aws lambda add-permission \
		--statement-id ${Iterator} \
		--function-name ${FunctionArn} \
		--action 'lambda:InvokeFunction' \
		--principal events.amazonaws.com \
		--source-arn ${RuleArn}; } 2>&1 \
	) || PrintException "Already Exists!"
	# Tie the rule to the function
	Subsciption=$( { aws events put-targets --rule ${FunctionKey} --targets Id=${Iterator},Arn=${FunctionArn}; } 2>&1 ) || PrintException "${Subscription}"
done

echo
Unindent
PrintSeparator
echo


##################################################
# Create the CAPI Core
##################################################

if aws cloudformation describe-stacks --stack-name Capi-Core > /dev/null 2>&1; then
	PrintInfo "Updating the ${BIBlue}Capi-Core${Green} stack..."
	StackId=$( { \
		aws cloudformation update-stack \
		--stack-name Capi-Core \
		--template-body file:////Users//GodlyPerfection//CAPI-Workspace//Template.json \
		--capabilities CAPABILITY_IAM \
		--query StackId \
		--parameters \
			ParameterKey=PlayerGameCountsGetterArn, ParameterValue=${OutputMap[PlayerGameCountsGetterArn]} \
			ParameterKey=PlayerGameCountsUpdaterArn, ParameterValue=${OutputMap[PlayerGameCountsUpdaterArn]} \ 
			ParameterKey=PlayerGamesGetterArn, ParameterValue=${OutputMap[PlayerGamesGetterArn]}; \
	} 2>&1 ) || PrintWarning "${StackId}"
else
	PrintInfo "Creating the ${BIBlue}Capi-Core${Green} stack..."
	StackId=$( { \
		aws cloudformation create-stack \
		--stack-name Capi-Core \
		--template-body file:////Users//GodlyPerfection//CAPI-Workspace//Template.json \
		--capabilities CAPABILITY_IAM \
		--query StackId \
		--parameters \
			ParameterKey=PlayerGameCountsGetterArn,ParameterValue=${OutputMap[PlayerGameCountsGetterArn]} \
			ParameterKey=PlayerGameCountsUpdaterArn,ParameterValue=${OutputMap[PlayerGameCountsUpdaterArn]} \
			ParameterKey=PlayerGamesGetterArn,ParameterValue=${OutputMap[PlayerGamesGetterArn]}; \ 
	} 2>&1 ) || PrintWarning "${StackId}"
fi


##################################################
# Wait for the Core to finish creating
##################################################

echo
PrintSeparator
printf '    Â» Waiting...  '
while true
do
	Statuses=$(aws cloudformation describe-stacks --query Stacks[*].StackStatus --output text)

	if [[ ! ${Statuses[*]} =~ "CREATE_IN_PROGRESS" ]]; then
		break
	fi

	SpinProgress
	sleep .5;
done

PrintBoldInfo "DONE!"
PrintSeparator
echo
