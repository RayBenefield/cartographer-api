#!/usr/local/bin/bash

# This gets the path of the executing script.
SELF_PATH=$(cd -P -- "$(dirname -- "${0}")" && pwd -P) && SELF_PATH=${SELF_PATH}/$(basename -- "${0}")
# If the path is a symlink (which is likely if it is in /usr/local/bin) this will get the actual filepath.
REAL_FILE=$(readlink ${SELF_PATH})
# If it isn't a symlink then let's stick with SELF_PATH
if [[ -z $REAL_FILE ]]; then
    REAL_FILE=${SELF_PATH}
fi
REAL_DIR=$(dirname ${REAL_FILE})

source $REAL_DIR/colors.sh
source $REAL_DIR/functions.sh

# Start with a blank line.
echo


##################################################
# Provide help documentation
##################################################

# Provide help.
getopts h help
if [[ "${help}" = "h" ]]; then
    PrintInfo "Description"
    echo
    PrintDescription "Enter the script's ${BIBlue}description${No_Color} here."
    echo
    PrintInfo "Usage"
    echo
    PrintCodeLine "script.template [-h]"
    echo
    PrintInfo "Examples"
    echo
    PrintCodeLine "script.template"
    echo
    PrintBoldInfo "Required Environment Variables"
    echo
    PrintCodeLine "${BICyan}EXAMPLE_ENV_VARIABLE${Cyan}=<some-description-of-variable>"
    echo

    exit
fi

Directory=$(find . -name "${1}.java" | sed "s/src\/.*//")

if [ -d "${Directory}" ]; then
	cd ${Directory}

	PrintInfo "Packaging ${BIBlue}${1}${Green} Function..."
	mvn clean package shade:shade >/dev/null 2>/dev/null

	ExitCode=$?
	if [[ ${ExitCode} -ne 0 ]] ; then
		cd -
		return
	fi

	PrintInfo "Uploading to S3..."
	aws s3 cp target/${1}-0.0.1-SNAPSHOT.jar s3://cartographer-api-lambda-code/${1}-0.0.1-SNAPSHOT.jar >/dev/null 2>/dev/null

	# TODO: Add logic to create the function if it doesn't exist.
	PrintInfo "Updating the function with the value in S3."
	aws lambda update-function-code --function-name ${1} --s3-bucket cartographer-api-lambda-code --s3-key ${1}-0.0.1-SNAPSHOT.jar >/dev/null 2>/dev/null

	cd - >/dev/null 2>/dev/null
fi

echo
