package com.cartographerapi.functions;

import com.amazonaws.services.lambda.runtime.Context;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.amazonaws.services.lambda.runtime.RequestHandler;
import com.amazonaws.services.lambda.runtime.events.SNSEvent;
import com.cartographerapi.domain.PlayerGamesQueueReader;
import com.cartographerapi.domain.PlayerGamesSqsReader;
import com.cartographerapi.domain.PlayerGame;
import com.cartographerapi.domain.Game;
import com.cartographerapi.domain.GamesReader;
import com.cartographerapi.domain.GamesDynamoReader;
import com.cartographerapi.domain.GamesWriter;
import com.cartographerapi.domain.GamesDynamoWriter;
import com.cartographerapi.domain.GamesHaloApiReader;
import java.io.IOException;
import com.amazonaws.services.sqs.model.ReceiveMessageRequest;
import com.amazonaws.services.sqs.model.DeleteMessageRequest;
import com.amazonaws.services.sqs.model.Message;
import com.amazonaws.services.sqs.AmazonSQSClient;
import java.util.List;
import java.util.ArrayList;

public class GamesAdder implements RequestHandler<SNSEvent, List<Game>> {
	
	private PlayerGamesQueueReader queueReader;
	private GamesReader cacheReader;
	private GamesReader sourceReader;
	private GamesWriter cacheWriter;
    private ObjectMapper mapper = new ObjectMapper();

	@SuppressWarnings("unchecked")
    @Override
    public List<Game> handleRequest(SNSEvent input, Context context) {
        context.getLogger().log("Input: " + input);
        List<Game> results = new ArrayList<Game>();

//        AmazonSQSClient sqs = new AmazonSQSClient();
//        String myQueueUrl = "https://sqs.us-west-2.amazonaws.com/789201490085/test-playergamepublisher";
//        ReceiveMessageRequest receiveMessageRequest = new ReceiveMessageRequest(myQueueUrl);
//        receiveMessageRequest.setMaxNumberOfMessages(10);
//        List<Message> messages = sqs.receiveMessage(receiveMessageRequest).getMessages();
//		String matchId = "";
//        for (Message message : messages) {
//			context.getLogger().log(message.getBody());
//			try {
//				JsonNode msgNode = mapper.readTree(mapper.readTree(message.getBody()).path("Message").textValue());
//				matchId = msgNode.path("matchId").asText();
//				context.getLogger().log(matchId);
//				Game cachedGame = cacheReader.getGameByMatchId(matchId);
//				if (cachedGame != null) {
//					sqs.deleteMessage(new DeleteMessageRequest()
//						.withQueueUrl(myQueueUrl)
//						.withReceiptHandle(message.getReceiptHandle()));
//					continue;
//				}
//
//				Game foundGame = null;
//				foundGame = sourceReader.getGameByMatchId(matchId);
//				
//				if (foundGame != null) {
//					cacheWriter.saveGame(foundGame);
//				}
//				
//				sqs.deleteMessage(new DeleteMessageRequest()
//					.withQueueUrl(myQueueUrl)
//					.withReceiptHandle(message.getReceiptHandle()));
//				results.add(foundGame);
//			} catch (IOException e) {
//			}
//        }

        List<PlayerGames> games = queueReader.getNumberOfPlayerGames(10);
        
        for (PlayerGame game : games) {
			Game cachedGame = cacheReader.getGameByMatchId(matchId);
			if (cachedGame != null) {
				queueReader.processedPlayerGame(game.getMatchId());
				continue;
			}

			Game foundGame = null;
			foundGame = sourceReader.getGameByMatchId(matchId);
			
			if (foundGame != null) {
				cacheWriter.saveGame(foundGame);
			}
			
			sqs.deleteMessage(new DeleteMessageRequest()
				.withQueueUrl(myQueueUrl)
				.withReceiptHandle(message.getReceiptHandle()));
			results.add(foundGame);
        }

        return results;
    }
    
    /**
     * The lazy IOC constructor for Lambda to instantiate.
     */
    public GamesAdder() {
    	this(
    		new GamesDynamoReader(),
    		new GamesHaloApiReader(),
    		new GamesDynamoWriter(),
    		new PlayerGamesSqsReader("https://sqs.us-west-2.amazonaws.com/789201490085/test-playergamepublisher")
		);
    }

    /**
     * The real constructor that supports dependency injection.
     */
    public GamesAdder(GamesReader cacheReader, GamesReader sourceReader, GamesWriter cacheWriter, PlayerGamesQueueReader queueReader) {
    	this.cacheReader = cacheReader;
    	this.sourceReader = sourceReader;
    	this.cacheWriter = cacheWriter;
    	this.queueReader = queueReader;
    }

}
