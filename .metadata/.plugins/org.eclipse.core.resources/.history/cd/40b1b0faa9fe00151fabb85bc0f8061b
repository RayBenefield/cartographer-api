package com.cartographerapi.functions;

import com.amazonaws.services.lambda.runtime.Context;
import com.amazonaws.services.lambda.runtime.RequestHandler;
import com.cartographerapi.domain.ScheduledEvent;
import com.cartographerapi.domain.PlayerGameCounts;
import com.cartographerapi.domain.PlayerGameCountsWriter;
import com.cartographerapi.domain.PlayerGameCountsCapiWriter;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import com.amazonaws.services.dynamodbv2.model.AttributeValue;
import com.amazonaws.services.dynamodbv2.model.ScanRequest;
import com.amazonaws.services.dynamodbv2.model.ScanResult;
import com.amazonaws.services.dynamodbv2.document.Item;
import com.amazonaws.services.dynamodbv2.document.internal.InternalUtils;
import com.amazonaws.services.dynamodbv2.AmazonDynamoDBClient;
import com.amazonaws.regions.Region;
import com.amazonaws.regions.Regions;

public class PlayerGameCountsRefresher implements RequestHandler<ScheduledEvent, List<PlayerGameCounts>> {

	private PlayerGameCountsWriter sourceWriter;

    @Override
    public List<PlayerGameCounts> handleRequest(ScheduledEvent input, Context context) {
        context.getLogger().log("Input: " + input);
        
        List<PlayerGameCounts> result = new ArrayList<PlayerGameCounts>();
        result.add(new PlayerGameCounts("GodlyPerfection"));
        
		AmazonDynamoDBClient client = new AmazonDynamoDBClient();
		client.setRegion(Region.getRegion(Regions.US_WEST_2));
        Map<String, AttributeValue> lastKeyEvaluated = null;
        do {
            ScanRequest scanRequest = new ScanRequest()
                .withTableName("ProductCatalog")
                .withLimit(10)
                .withExclusiveStartKey(lastKeyEvaluated);

            ScanResult scanResult = client.scan(scanRequest);
            for (Map<String, AttributeValue> scanItem : scanResult.getItems()){
				Item item = Item.fromMap(InternalUtils.toSimpleMapValue(scanItem));
            }
            lastKeyEvaluated = scanResult.getLastEvaluatedKey();
        } while (lastKeyEvaluated != null);
		
		PlayerGameCounts counts = sourceWriter.savePlayerGameCounts(new PlayerGameCounts("GodlyPerfection"));
		result.add(counts);

        return result;
    }
    
    /**
     * The lazy IOC constructor for Lambda to instantiate.
     */
    public PlayerGameCountsRefresher() {
    	this(new PlayerGameCountsCapiWriter());
    }

    /**
     * The real constructor that supports dependency injection.
     */
    public PlayerGameCountsRefresher(PlayerGameCountsWriter sourceWriter) {
    	this.sourceWriter = sourceWriter;
    }

}
