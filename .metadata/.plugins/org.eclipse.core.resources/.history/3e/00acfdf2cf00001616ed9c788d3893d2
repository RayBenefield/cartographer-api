package com.cartographerapi.functions;

import com.amazonaws.services.lambda.runtime.Context;
import com.amazonaws.services.lambda.runtime.RequestHandler;
import com.amazonaws.services.lambda.runtime.events.DynamodbEvent;
import com.amazonaws.services.lambda.runtime.events.DynamodbEvent.DynamodbStreamRecord;
import com.amazonaws.regions.Region;
import com.amazonaws.regions.Regions;
import com.amazonaws.services.dynamodbv2.model.AttributeValue;
import com.amazonaws.services.dynamodbv2.document.Item;
import com.amazonaws.services.dynamodbv2.document.internal.InternalUtils;
import java.util.Map;
import com.amazonaws.services.sns.AmazonSNSClient;
import com.amazonaws.services.sns.model.PublishRequest;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.core.JsonGenerationException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.cartographerapi.domain.PlayerGameCounts;
import com.cartographerapi.domain.PlayerGameCountsSnsWriter;
import com.cartographerapi.domain.PlayerGameCountsWriter;

public class PlayerGameCountsPublisher implements RequestHandler<DynamodbEvent, Boolean> {

	private PlayerGameCountsWriter newWriter;
	private PlayerGameCountsWriter updatedWriter;

    @Override
    public Boolean handleRequest(DynamodbEvent input, Context context) {
        context.getLogger().log("Input: " + input);

//        AmazonSNSClient snsClient = new AmazonSNSClient();		                           
//        snsClient.setRegion(Region.getRegion(Regions.US_WEST_2));
//        String newTopicArn = "arn:aws:sns:us-west-2:789201490085:capi-playergamecounts-new";
//        String updatedTopicArn = "arn:aws:sns:us-west-2:789201490085:capi-playergamecounts-updated";
//        ObjectMapper mapper = new ObjectMapper();

		for (DynamodbStreamRecord record : input.getRecords()) {
			Map<String, AttributeValue> newData = record.getDynamodb().getNewImage();
			if (newData == null) continue; // Ignore deletes for now;

			Item newItem = Item.fromMap(InternalUtils.toSimpleMapValue(newData));
			PlayerGameCounts counts = new PlayerGameCounts(newItem);
			try {
//				PublishRequest publishRequest;
				Map<String, AttributeValue> oldData = record.getDynamodb().getOldImage();

				if (oldData != null) {
					Item oldItem = Item.fromMap(InternalUtils.toSimpleMapValue(oldData));
					PlayerGameCounts oldCounts = new PlayerGameCounts(oldItem);
					// Not really an update.
					if (counts.getTotalGames().equals(oldCounts.getTotalGames())) continue;
					// This is an update.
					updatedWriter.savePlayerGameCounts(counts);
//					publishRequest = new PublishRequest(updatedTopicArn, mapper.writeValueAsString(counts));
				} else {
					// This is new.
					newWriter.savePlayerGameCounts(counts);
//					publishRequest = new PublishRequest(newTopicArn, mapper.writeValueAsString(counts));
				}

//				snsClient.publish(publishRequest);
			} catch (JsonGenerationException e) {
				e.printStackTrace();
			} catch (JsonMappingException e) {
				e.printStackTrace();
			} catch (JsonProcessingException e) {
				e.printStackTrace();
			}
		}
		
        return true;
    }
    
    /**
     * The lazy IOC constructor for Lambda to instantiate.
     */
    public PlayerGameCountsPublisher() {
    	this(
			new PlayerGameCountsSnsWriter("arn:aws:sns:us-west-2:789201490085:capi-playergamecounts-new"),
			new PlayerGameCountsSnsWriter("arn:aws:sns:us-west-2:789201490085:capi-playergamecounts-updated")
		);
    }

    /**
     * The real constructor that supports dependency injection.
     */
    public PlayerGameCountsPublisher(PlayerGameCountsWriter newWriter, PlayerGameCountsWriter updatedWriter) {
    	this.newWriter = newWriter;
    	this.updatedWriter = updatedWriter;
    }

}
