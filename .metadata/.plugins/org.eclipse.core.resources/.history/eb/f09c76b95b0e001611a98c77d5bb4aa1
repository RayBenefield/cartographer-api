package com.cartographerapi.functions;

import com.cartographerapi.domain.DomainQueueFillRequest;
import com.cartographerapi.domain.ObjectSqsWriter;
import com.cartographerapi.domain.ObjectSnsWriter;
import com.cartographerapi.domain.SegmentScannerRequest;
import com.cartographerapi.domain.SegmentScannerProxy;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapper;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBScanExpression;
import com.amazonaws.services.dynamodbv2.datamodeling.ScanResultPage;
import com.amazonaws.services.dynamodbv2.document.internal.InternalUtils;
import com.amazonaws.services.dynamodbv2.AmazonDynamoDBClient; 
import com.amazonaws.services.lambda.runtime.Context;
import com.amazonaws.services.lambda.runtime.RequestHandler;
import com.amazonaws.regions.Region;
import com.amazonaws.regions.Regions;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.io.IOException;
import com.amazonaws.services.dynamodbv2.datamodeling.ScanResultPage;
import com.amazonaws.services.lambda.runtime.events.SNSEvent;
import com.amazonaws.services.lambda.AWSLambdaAsyncClient;
import com.amazonaws.services.lambda.model.InvokeRequest; 
import com.amazonaws.services.lambda.model.InvokeResult; 
import java.util.concurrent.Future;

import java.util.Map;
import java.util.HashMap;
import java.util.List;
import java.util.ArrayList;

public class SegmentScanner implements RequestHandler<SNSEvent, List<Object>> {

    @Override
    public List<Object> handleRequest(SNSEvent input, Context context) {
        context.getLogger().log("Input: " + input);

        ObjectMapper mapper = new ObjectMapper();
        
        // Figure out who this is for.
		SegmentScannerRequest request;
		try {
			context.getLogger().log(mapper.writeValueAsString(input));
			Map<String, Object> requestMap = mapper.readValue(input.getRecords().get(0).getSNS().getMessage(), HashMap.class);
			request = new SegmentScannerRequest(requestMap);
		} catch (IOException exception) {
			return new ArrayList<Object>();
		}

        List<Object> results = new ArrayList<Object>();
		try {
			AmazonDynamoDBClient client = new AmazonDynamoDBClient();
			client.setRegion(Region.getRegion(Regions.US_WEST_2));
			DynamoDBMapper dbMapper = new DynamoDBMapper(client);
			
			DynamoDBScanExpression scanExpression = new DynamoDBScanExpression()
				.withSegment(request.getSegmentId())
				.withTotalSegments(request.getTotalSegments());
			
			if (request.getLastEvaluatedKey() != null) {
				scanExpression.withExclusiveStartKey(InternalUtils.fromSimpleMap(request.getLastEvaluatedKey()));
			}

			ScanResultPage page = dbMapper.scanPage(Class.forName(request.getDomainObject()), scanExpression);
			results = new ArrayList<Object>(page.getResults());

//			results.add(page.getLastEvaluatedKey());
//			scanExpression = new DynamoDBScanExpression().withSegment(1).withTotalSegments(2).withExclusiveStartKey(page.getLastEvaluatedKey());
//			page = dbMapper.scanPage(Class.forName(input.getDomainObject()), scanExpression);

//			results.clear();
//			results.add(page.getLastEvaluatedKey());
			
			ObjectSqsWriter writer = new ObjectSqsWriter(request.getQueueUrlKey());
			writer.saveObjects(results);

			if (page.getLastEvaluatedKey() != null) {
				context.getLogger().log("LastEvalKey: " + page.getLastEvaluatedKey());
//				AWSLambdaAsyncClient lambdaClient = new AWSLambdaAsyncClient();
//				lambdaClient.setRegion(Region.getRegion(Regions.US_WEST_2));
//				ObjectMapper mapper = new ObjectMapper();
				SegmentScannerRequest scannerInput = new SegmentScannerRequest(request.getSegmentId(), request.getTotalSegments(), request.getDomainObject(), request.getQueueUrlKey());
				scannerInput.setLastEvaluatedKey(InternalUtils.toSimpleMapValue(page.getLastEvaluatedKey()));

				ObjectSnsWriter continueWriter = new ObjectSnsWriter("snsSegmentScannerRequestContinue");
				continueWriter.saveObject(scannerInput);
//				InvokeRequest request = new InvokeRequest()
//					.withFunctionName("arn:aws:lambda:us-west-2:789201490085:function:SegmentScanner")
//					.withPayload(mapper.writeValueAsString(scannerInput));
//				Future<InvokeResult> result = lambdaClient.invokeAsync(request);
//				
//				while (!result.isDone()) {
//					Thread.sleep(10);
//				}
			}
		} catch (ClassNotFoundException exception) {
			System.out.println("oops");
			context.getLogger().log("Error: NotFound");
		}

        return results;
    }

}
