package com.cartographerapi.functions;

import com.amazonaws.services.lambda.runtime.Context;
import com.amazonaws.services.lambda.runtime.RequestHandler;
import com.amazonaws.services.lambda.runtime.RequestStreamHandler;
import java.util.List;
import com.cartographerapi.domain.Gamertag;
import com.cartographerapi.domain.PlayerGame;
import com.cartographerapi.domain.PlayerGamesReader;
import com.cartographerapi.domain.PlayerGamesDynamoReader;
import java.io.*;

public class PlayerGamesGetter implements RequestStreamHandler, RequestHandler<Gamertag, List<PlayerGame>> {

	private PlayerGamesReader cacheReader;

    @Override
    public List<PlayerGame> handleRequest(Gamertag input, Context context) {
		List<PlayerGame> games = cacheReader.getPlayerGamesByGamertag(input.getGamertag());

		return games;
    }

    @Override
    public void handleRequest(InputStream inputStream, OutputStream outputStream, Context context) throws IOException {
        Request req = new Gson().fromJson(IOUtils.toString(inputStream, "UTF-8"), Request.class);
        Response resp = new ResponseClass();
            resp.id = 1;
            resp.person.name = req.name;
            et_home_phone(req.name);
        outputStream.write(new Gson().toJson(resp).getBytes(Charset.forName("UTF-8")));
    }
    
    /**
     * The lazy IOC constructor for Lambda to instantiate.
     */
    public PlayerGamesGetter() {
    	this(new PlayerGamesDynamoReader());
    }

    /**
     * The real constructor that supports dependency injection.
     */
    public PlayerGamesGetter(PlayerGamesReader cacheReader) {
    	this.cacheReader = cacheReader;
    }

}
