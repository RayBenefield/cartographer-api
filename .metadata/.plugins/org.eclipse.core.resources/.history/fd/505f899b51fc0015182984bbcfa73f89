package com.cartographerapi.domain;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.JsonNode;
import java.io.IOException;

/**
 * Reader repository for PlayerGameCounts from CAPI.
 * 
 * @see PlayerGameCountsReader
 * 
 * @author GodlyPerfection
 *
 */
public class PlayerGameCountsCapiReader implements PlayerGameCountsReader {

	private CapiWrapper api;
	private ObjectMapper mapper;
	
	public PlayerGameCountsCapiReader() {
		this.api = new CapiWrapper();
		this.mapper = new ObjectMapper();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public PlayerGameCounts getPlayerGameCountsByGamertag(String gamertag) {
		PlayerGameCounts counts;

		try {
			String totalResult = api.playerGameCountsGetter(gamertag);
			counts = mapper.readValue(totalResult, PlayerGameCounts.class);
		} catch (IOException exception) {
			return new PlayerGameCounts(gamertag, 0, 0);
		}

		return counts;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public PlayerGameCounts getPlayerGameCountsByPlayerGameCounts(PlayerGameCounts counts) {
		Integer completedGames = counts.getGamesCompleted();
		Integer totalGames = counts.getTotalGames();

		try {
			JsonNode root;
			String totalResult = api.serviceRecord(counts.getGamertag());
			root = mapper.readTree(totalResult);
			completedGames = root.path("Results").path(0).path("Result").path("CustomStats").path("TotalGamesCompleted").asInt();
			totalGames = counts.getTotalGames();

			Integer lastGames = 25;
			while (lastGames == 25) {
				String lastResult = api.customGames(counts.getGamertag(), totalGames);
				root = mapper.readTree(lastResult);
				lastGames = root.path("ResultCount").asInt();
				totalGames += lastGames;
			}
		} catch (IOException exception) {
			return counts;
		}

		return new PlayerGameCounts(counts.getGamertag(), completedGames, totalGames);
	}

}
