package com.cartographerapi.functions;

import com.amazonaws.services.lambda.runtime.Context;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.amazonaws.services.lambda.runtime.RequestHandler;
import com.amazonaws.services.lambda.runtime.events.SNSEvent;
import com.cartographerapi.domain.Game;
import com.cartographerapi.domain.GamesReader;
import com.cartographerapi.domain.GamesDynamoReader;
import java.util.Map;
import java.util.HashMap;
import java.io.IOException;

public class GamesAdder implements RequestHandler<SNSEvent, Game> {
	
	private GameReader gameReader;

	@SuppressWarnings("unchecked")
    @Override
    public Game handleRequest(SNSEvent input, Context context) {
        context.getLogger().log("Input: " + input);
        ObjectMapper mapper = new ObjectMapper();

		Game game;
		try {
			Map<String, Object> gameMap = mapper.readValue(input.getRecords().get(0).getSNS().getMessage(), HashMap.class);
			game = new Game(gameMap);
		} catch (IOException exception) {
			return null;
		}

        return game;
    }
    
    /**
     * The lazy IOC constructor for Lambda to instantiate.
     */
    public PlayerGamesAdder() {
    	this(
    		new GamesDynamoReader()
		);
    }

    /**
     * The real constructor that supports dependency injection.
     */
    public PlayerGamesAdder(
    	PlayerGamesHaloApiReader gameReader,
    	PlayerGamesWriter gameWriter,
    	PlayerGamesCheckpointReader checkpointReader,
    	PlayerGamesCheckpointWriter checkpointWriter,
    	PlayerGameCountsWriter continueWriter
	) {
    	this.gameReader = gameReader;
    	this.gameWriter = gameWriter;
    	this.checkpointReader = checkpointReader;
    	this.checkpointWriter = checkpointWriter;
    	this.continueWriter = continueWriter;
    }

}
