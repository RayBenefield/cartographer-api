package com.cartographerapi.functions;

import com.amazonaws.services.lambda.runtime.Context;
import com.amazonaws.services.lambda.runtime.RequestHandler;
import com.cartographerapi.domain.ScheduledEvent;
import com.cartographerapi.domain.PlayerGameCounts;
import com.cartographerapi.domain.PlayerGameCountsWriter;
import com.cartographerapi.domain.PlayerGameCountsCapiWriter;
import com.cartographerapi.domain.CapiWrapper;
import java.util.List;
import java.util.concurrent.TimeUnit;
import java.util.ArrayList;
import java.io.IOException;

public class PlayerGameCountsRefresher implements RequestHandler<ScheduledEvent, List<PlayerGameCounts>> {

	private PlayerGameCountsWriter sourceWriter;
	private CapiWrapper api;

    @Override
    public List<PlayerGameCounts> handleRequest(ScheduledEvent input, Context context) {
        context.getLogger().log("Input: " + input);
        
        List<PlayerGameCounts> result = new ArrayList<PlayerGameCounts>();
        result.add(new PlayerGameCounts("GodlyPerfection"));
		
		this.api = new CapiWrapper();
		try {
			api.playerGameCountsUpdaterAsync("GodlyPerfection");
			TimeUnit.SECONDS.sleep(1);
		} catch (IOException exception) {
		} catch (InterruptedException exception) {
		}
//		PlayerGameCounts counts = sourceWriter.savePlayerGameCounts(new PlayerGameCounts("GodlyPerfection"));
//		result.add(counts);

        return result;
    }
    
    /**
     * The lazy IOC constructor for Lambda to instantiate.
     */
    public PlayerGameCountsRefresher() {
    	this(new PlayerGameCountsCapiWriter());
    }

    /**
     * The real constructor that supports dependency injection.
     */
    public PlayerGameCountsRefresher(PlayerGameCountsWriter sourceWriter) {
    	this.sourceWriter = sourceWriter;
    }

}
